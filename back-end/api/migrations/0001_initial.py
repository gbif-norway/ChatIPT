# Generated by Django 5.2.1 on 2025-07-11 11:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=300, unique=True)),
                ("text", models.TextField()),
            ],
            options={
                "ordering": ["id"],
                "get_latest_by": "id",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "orcid_id",
                    models.CharField(
                        blank=True, help_text="ORCID identifier", max_length=50
                    ),
                ),
                (
                    "orcid_access_token",
                    models.TextField(blank=True, help_text="ORCID OAuth access token"),
                ),
                (
                    "orcid_refresh_token",
                    models.TextField(blank=True, help_text="ORCID OAuth refresh token"),
                ),
                (
                    "institution",
                    models.CharField(
                        blank=True, help_text="User's institution", max_length=500
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True, help_text="User's department", max_length=500
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="User's country", max_length=100
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("orcid", models.CharField(blank=True, max_length=2000)),
                ("file", models.FileField(upload_to="user_files")),
                ("title", models.CharField(blank=True, default="", max_length=2000)),
                ("structure_notes", models.TextField(blank=True, default="")),
                (
                    "description",
                    models.CharField(blank=True, default="", max_length=2000),
                ),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("rejected_at", models.DateTimeField(blank=True, null=True)),
                ("dwca_url", models.CharField(blank=True, max_length=2000)),
                ("gbif_url", models.CharField(blank=True, max_length=2000)),
                ("user_language", models.CharField(blank=True, max_length=100)),
                (
                    "dwc_core",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("event_occurrences", "Event"),
                            ("occurrence", "Occurrence"),
                            ("taxonomy", "Taxonomy"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "dwc_extensions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("simple_multimedia", "Simple Multimedia"),
                                ("measurement_or_fact", "Measurement Or Fact"),
                                ("gbif_releve", "Gbif Releve"),
                            ],
                            max_length=500,
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datasets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("busy_thinking", models.BooleanField(default=False)),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.dataset"
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("openai_obj", models.JSONField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.agent"
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="Table",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(blank=True, max_length=200)),
                ("df", picklefield.fields.PickledObjectField(editable=False)),
                ("description", models.CharField(blank=True, max_length=2000)),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.dataset"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="agent",
            name="tables",
            field=models.ManyToManyField(blank=True, to="api.table"),
        ),
        migrations.AddField(
            model_name="agent",
            name="task",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.task"
            ),
        ),
    ]
