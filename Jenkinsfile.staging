// This is a Jenkinsfile specifically for staging that builds Docker images and updates GitOps configuration.
// The pipeline uses git tags as the source of truth for versioning.
//
// JENKINS CONFIGURATION:
// 1. Create a Pipeline project (not multibranch)
// 2. In Pipeline ‚Üí Definition ‚Üí Pipeline script from SCM:
//    - SCM: Git
//    - Repository URL: your-repo-url
//    - Credentials: your-git-credentials
//    - Script Path: Jenkinsfile.staging
// 3. This builds both backend and frontend images, then updates GitOps configuration for staging

pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:debug
                    command:
                    - /busybox/cat
                    tty: true
                    volumeMounts:
                    - name: kaniko-secret
                      mountPath: /kaniko/.docker
                  volumes:
                  - name: kaniko-secret
                    secret:
                      secretName: kaniko-secret
                      items:
                      - key: .dockerconfigjson
                        path: config.json
            '''
        }
    }

    environment {
        REGISTRY = 'gbifnorway'
        BACKEND_IMAGE = 'chatipt-back-end'
        FRONTEND_IMAGE = 'chatipt-front-end'
        BRANCH_NAME = 'staging'
        ENVIRONMENT = 'staging'
    }

    stages {
        stage('Get Version from Git') {
            steps {
                script {
                    // Get version from git - more robust approach
                    sh '''
                        echo "Getting version from git..."
                        
                        # For staging, we want to use the current commit SHA or a timestamp
                        # This ensures we always have a unique version for staging builds
                        
                        # Get short commit SHA
                        COMMIT_SHA=$(git rev-parse --short HEAD)
                        echo "Commit SHA: $COMMIT_SHA"
                        
                        # Get current timestamp for uniqueness
                        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                        echo "Timestamp: $TIMESTAMP"
                        
                        # Create version string
                        VERSION="staging-${COMMIT_SHA}-${TIMESTAMP}"
                        echo "Generated version: $VERSION"
                        
                        # Generate image tag (no build number needed since timestamp provides uniqueness)
                        IMAGE_TAG="${VERSION}"
                        echo "Generated image tag: $IMAGE_TAG"
                        
                        # Store version info for later stages
                        echo "$VERSION" > version.txt
                        echo "$IMAGE_TAG" > image_tag.txt
                    '''
                    
                    // Read the version info
                    def version = readFile('version.txt').trim()
                    def imageTag = readFile('image_tag.txt').trim()
                    
                    echo "Version: ${version}"
                    echo "Image tag: ${imageTag}"
                    
                    // Store in environment for post actions
                    env.VERSION = version
                    env.IMAGE_TAG = imageTag
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    def imageTag = readFile('image_tag.txt').trim()
                    echo "Building backend with image tag: ${imageTag}"
                    
                    dir('back-end') {
                        container('kaniko') {
                            sh """
                                /kaniko/executor \\
                                    --context . \\
                                    --dockerfile Dockerfile \\
                                    --destination ${REGISTRY}/${BACKEND_IMAGE}:${imageTag} \\
                                    --cache=true
                            """
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    def imageTag = readFile('image_tag.txt').trim()
                    echo "Building frontend with image tag: ${imageTag}"
                    
                    dir('front-end') {
                        container('kaniko') {
                            sh """
                                /kaniko/executor \\
                                    --context . \\
                                    --dockerfile Dockerfile \\
                                    --destination ${REGISTRY}/${FRONTEND_IMAGE}:${imageTag} \\
                                    --cache=true
                            """
                        }
                    }
                }
            }
        }

        stage('Update GitOps Repo') {
            steps {
                script {
                    def imageTag = readFile('image_tag.txt').trim()
                    echo "Updating GitOps with image tag: ${imageTag}"
                    
                    // Clone the GitOps repo
                    sh '''
                        rm -rf gitops-tmp
                        git clone https://github.com/gbif-norway/gitops.git gitops-tmp
                    '''
                    
                    // Update image tags in values-staging.yaml
                    container('kaniko') {
                        sh """
                            cd gitops-tmp/apps/chatipt
                            echo "Updating image tags in values-staging.yaml to \${imageTag}"
                            
                            # Create backup of original file
                            cp values-staging.yaml values-staging.yaml.backup
                            
                            # Update backend image tag
                            sed -i "/^[[:space:]]*backEnd:/,/^[[:space:]]*frontEnd:/ s/^[[:space:]]*tag:[[:space:]]*.*/    tag: \${imageTag}/" values-staging.yaml
                            
                            # Update frontend image tag
                            sed -i "/^[[:space:]]*frontEnd:/,/^[[:space:]]*$/ s/^[[:space:]]*tag:[[:space:]]*.*/    tag: \${imageTag}/" values-staging.yaml
                            
                            # Verify the changes
                            echo "Updated values-staging.yaml:"
                            grep -A 5 -B 5 "tag:" values-staging.yaml
                            
                            echo "Updated image tags successfully"
                        """
                    }
                    
                    // Commit and push changes
                    withCredentials([usernamePassword(credentialsId: 'jenkins-git-https', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            cd gitops-tmp
                            git config user.email "ci-bot@gbif.no"
                            git config user.name "GBIF Jenkins CI"
                            git add apps/chatipt/values-staging.yaml
                            git commit -m "ci: update image tags in values-staging.yaml to ${imageTag} [skip ci]" || true
                            git remote set-url origin https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/gbif-norway/gitops.git
                            echo "Pushing to GitHub with credentials..."
                            git push origin main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
        success {
            echo "üéâ Staging pipeline completed successfully"
            echo "üì¶ Images pushed to registry with tag: ${env.IMAGE_TAG}"
            echo "üìã Based on version: ${env.VERSION}"
        }
        failure {
            echo "‚ùå Staging pipeline failed"
        }
    }
} 