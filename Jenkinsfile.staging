// This is a Jenkinsfile specifically for staging that builds Docker images and updates GitOps configuration.
// The pipeline reads the appVersion from the GitOps Chart.yaml and uses it as the base for image tags.
//
// JENKINS CONFIGURATION:
// 1. Create a Pipeline project (not multibranch)
// 2. In Pipeline ‚Üí Definition ‚Üí Pipeline script from SCM:
//    - SCM: Git
//    - Repository URL: your-repo-url
//    - Credentials: your-git-credentials
//    - Script Path: Jenkinsfile.staging
// 3. This builds both backend and frontend images, then updates GitOps configuration for staging

pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:debug
                    command:
                    - /busybox/cat
                    tty: true
                    volumeMounts:
                    - name: kaniko-secret
                      mountPath: /kaniko/.docker
                  volumes:
                  - name: kaniko-secret
                    secret:
                      secretName: kaniko-secret
                      items:
                      - key: .dockerconfigjson
                        path: config.json
            '''
        }
    }

    environment {
        REGISTRY = 'gbifnorway'
        BACKEND_IMAGE = 'chatipt-back-end'
        FRONTEND_IMAGE = 'chatipt-front-end'
        BRANCH_NAME = 'staging'
        ENVIRONMENT = 'staging'
        IMAGE_TAG = ''
    }

    stages {
        stage('Get App Version') {
            steps {
                script {
                    // Clone the GitOps repo to get the current appVersion
                    sh '''
                        rm -rf gitops-tmp
                        git clone https://github.com/gbif-norway/gitops.git gitops-tmp
                    '''
                    
                    // Read the appVersion from Chart.yaml with better debugging
                    def appVersion = sh(
                        script: '''
                            cd gitops-tmp/apps/chatipt
                            echo "Current directory: $(pwd)"
                            echo "Chart.yaml exists: $(ls -la Chart.yaml)"
                            echo "Chart.yaml content:"
                            cat Chart.yaml
                            
                            if ! command -v yq &> /dev/null; then
                                echo "yq not found, downloading..."
                                curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq
                                chmod +x yq
                                YQ=./yq
                            else
                                YQ=$(command -v yq)
                            fi
                            echo "Using yq: $YQ"
                            $YQ --version
                            echo "Reading appVersion from Chart.yaml..."
                            APP_VERSION=$($YQ e '.appVersion' Chart.yaml)
                            echo "yq output: '$APP_VERSION'"
                            echo "$APP_VERSION"
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    echo "Raw appVersion output: '${appVersion}'"
                    
                    // Validate that we got a proper version
                    if (appVersion == null || appVersion.isEmpty() || appVersion == "null") {
                        error "Failed to read appVersion from Chart.yaml. Got: '${appVersion}'"
                    }
                    
                    echo "Current appVersion from Chart.yaml: ${appVersion}"
                    env.IMAGE_TAG = "${appVersion}-${env.BUILD_NUMBER}"
                    echo "Generated image tag: ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    dir('back-end') {
                        container('kaniko') {
                            sh """
                                /kaniko/executor \\
                                    --context . \\
                                    --dockerfile Dockerfile \\
                                    --destination ${REGISTRY}/${BACKEND_IMAGE}:${env.IMAGE_TAG} \\
                                    --cache=true
                            """
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir('front-end') {
                        container('kaniko') {
                            sh """
                                /kaniko/executor \\
                                    --context . \\
                                    --dockerfile Dockerfile \\
                                    --destination ${REGISTRY}/${FRONTEND_IMAGE}:${env.IMAGE_TAG} \\
                                    --cache=true
                            """
                        }
                    }
                }
            }
        }

        stage('Update GitOps Repo') {
            steps {
                script {
                    // Update image tags in values-staging.yaml
                    sh """
                        cd gitops-tmp/apps/chatipt
                        if ! command -v yq &> /dev/null; then
                            curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq
                            chmod +x yq
                            YQ=./yq
                        else
                            YQ=\$(command -v yq)
                        fi
                        \$YQ --version
                        echo "Updating image tags in values-staging.yaml to ${env.IMAGE_TAG}"
                        \$YQ e -i ".backEnd.image.tag = \"${env.IMAGE_TAG}\"" values-staging.yaml
                        \$YQ e -i ".frontEnd.image.tag = \"${env.IMAGE_TAG}\"" values-staging.yaml
                        echo "Updated image tags successfully"
                    """
                    
                    // Commit and push changes using SSH credentials
                    sshagent(['jenkins-git-ssh']) {
                        sh """
                            cd gitops-tmp
                            git config user.email "ci-bot@gbif.no"
                            git config user.name "GBIF Jenkins CI"
                            git add apps/chatipt/values-staging.yaml
                            git commit -m "ci: update image tags in values-staging.yaml to ${env.IMAGE_TAG} [skip ci]" || true
                            git remote set-url origin git@github.com:gbif-norway/gitops.git
                            git push origin main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
        success {
            echo "üéâ Staging pipeline completed successfully"
            echo "üì¶ Images pushed to registry with tag: ${IMAGE_TAG}"
            echo "üìã Based on appVersion: ${APP_VERSION}"
        }
        failure {
            echo "‚ùå Staging pipeline failed"
        }
    }
} 