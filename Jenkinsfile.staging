pipeline {
    agent any
    
    environment {
        // Registry configuration
        REGISTRY = 'gbifnorway'
        BACKEND_IMAGE = 'publishgpt-back-end'
        FRONTEND_IMAGE = 'publishgpt-front-end'
        IMAGE_TAG = "staging-${env.BUILD_NUMBER}"
        
        // Environment configuration
        ENVIRONMENT = 'staging'
        
        // Git configuration
        DEVOPS_REPO = 'your-devops-repo-url' // Replace with your actual devops repo URL
        DEVOPS_BRANCH = 'main' // or 'staging' if you have separate configs
        
        // Docker buildx configuration
        DOCKER_BUILDX_PLATFORM = 'linux/amd64'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Docker Buildx') {
            steps {
                script {
                    // Ensure buildx is available
                    sh 'docker buildx version'
                    
                    // Create and use a new builder instance if needed
                    sh '''
                        if ! docker buildx inspect multiarch-builder >/dev/null 2>&1; then
                            docker buildx create --name multiarch-builder --use
                        else
                            docker buildx use multiarch-builder
                        fi
                        docker buildx inspect --bootstrap
                    '''
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                script {
                    dir('back-end') {
                        sh """
                            docker buildx build \
                                --platform ${DOCKER_BUILDX_PLATFORM} \
                                -t ${REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} \
                                --push .
                        """
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                script {
                    dir('front-end') {
                        // Build frontend image
                        sh """
                            docker buildx build \
                                --platform ${DOCKER_BUILDX_PLATFORM} \
                                -t ${REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} \
                                --push .
                        """
                    }
                }
            }
        }
        
        stage('Update DevOps Repo') {
            steps {
                script {
                    // Clone the devops repo
                    dir('devops-repo') {
                        // Clean up any existing checkout
                        deleteDir()
                        
                        // Clone the devops repository
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${DEVOPS_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'CleanBeforeCheckout'],
                                [$class: 'CleanCheckout']
                            ],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: "${DEVOPS_REPO}",
                                credentialsId: 'your-git-credentials-id' // Replace with your Jenkins credentials ID
                            ]]
                        ])
                        
                        // Install yq for YAML processing
                        sh """
                            # Install yq if not available
                            if ! command -v yq &> /dev/null; then
                                wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
                                chmod +x /usr/local/bin/yq
                            fi
                        """
                        
                        // Update the image tags in your ArgoCD configuration using yq
                        script {
                            // Update backend image tag in values-staging.yaml
                            if (fileExists('apps/publishgpt/values-staging.yaml')) {
                                sh """
                                    yq eval '.backEnd.image.tag = \"${IMAGE_TAG}\"' -i apps/publishgpt/values-staging.yaml
                                    yq eval '.backEnd.image.repository = \"${REGISTRY}/${BACKEND_IMAGE}\"' -i apps/publishgpt/values-staging.yaml
                                """
                            }
                            // Update frontend image tag in values-staging.yaml
                            if (fileExists('apps/publishgpt/values-staging.yaml')) {
                                sh """
                                    yq eval '.frontEnd.image.tag = \"${IMAGE_TAG}\"' -i apps/publishgpt/values-staging.yaml
                                    yq eval '.frontEnd.image.repository = \"${REGISTRY}/${FRONTEND_IMAGE}\"' -i apps/publishgpt/values-staging.yaml
                                """
                            }
                        }
                        
                        // Commit and push the changes
                        sh """
                            git config user.email "jenkins@gbif.no"
                            git config user.name "Jenkins CI"
                            git add .
                            git commit -m "Update image tags to ${IMAGE_TAG} for staging (build ${env.BUILD_NUMBER})" || exit 0
                            git push origin ${DEVOPS_BRANCH}
                        """
                    }
                }
            }
        }
        
        stage('Verify Images') {
            steps {
                script {
                    // Verify that images were pushed successfully
                    sh """
                        docker pull ${REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker pull ${REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}
                        
                        echo "‚úÖ Backend image: ${REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}"
                        echo "‚úÖ Frontend image: ${REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}"
                        echo "‚úÖ Environment: ${ENVIRONMENT}"
                        echo "‚úÖ DevOps repo updated successfully"
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            script {
                echo "üéâ Staging pipeline completed successfully!"
                echo "üì¶ Images pushed to registry with tag: ${IMAGE_TAG}"
                echo "üåç Environment: ${ENVIRONMENT}"
                echo "üîÑ DevOps repo updated for ArgoCD sync"
            }
        }
        failure {
            script {
                echo "‚ùå Staging pipeline failed!"
                echo "Check the logs above for more details."
            }
        }
    }
} 